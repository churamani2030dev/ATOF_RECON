package org.example;
import org.jlab.jnp.hipo4.data.Bank;
import org.jlab.jnp.hipo4.data.Event;
import org.jlab.jnp.hipo4.io.HipoReader;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;

public class ZAndPhiForBarsZPositionAndTimePlotterWithDBSCAN {

    private static final int NUM_WEDGES = 10;  // Total number of wedges in each bar
    private static final int NUM_BARS = 60;    // Total number of bars
    private static final int MAX_LAYER = 3;    // Maximum number of layers (0 to 3)
    private static final double WEDGE_SPACING = 30.0;  // Spacing between wedges in mm
    private static final double VELOCITY_EFF = 200.0;  // mm/ns, assumed effective velocity in the bar
    private static final double Z_THRESHOLD = 5.0;     // Maximum allowed difference in Z for clustering
    private static final double PHI_THRESHOLD = 0.01;  // Maximum allowed difference in Phi for clustering
    private static final double TIME_THRESHOLD = 1.0;  // Maximum allowed difference in Time for clustering

    // Class to represent event data for wedge and bar
    private static class EventData {
        double zWedge;
        double zBar;
        double phiWedge;
        double phiBar;
        double timeWedge;
        double timeBar;
        int sector;
        int layer;
        int component;
        int order;
        int adc;
        short pedestal;

        EventData(double zWedge, double zBar, double phiWedge, double phiBar, double timeWedge, double timeBar,
                  int sector, int layer, int component, int order, int adc, short pedestal) {
            this.zWedge = zWedge;
            this.zBar = zBar;
            this.phiWedge = wrapPhi(phiWedge);
            this.phiBar = wrapPhi(phiBar);
            this.timeWedge = timeWedge;
            this.timeBar = timeBar;
            this.sector = sector;
            this.layer = layer;
            this.component = component;
            this.order = order;
            this.adc = adc;
            this.pedestal = pedestal;
        }
    }

    // Class to represent clusters
    private static class Cluster {
        List<EventData> events = new ArrayList<>();

        public void addEvent(EventData event) {
            events.add(event);
        }

        public int getClusterSize() {
            return events.size();
        }

        public boolean isValidCluster() {
            return events.size() >= 2;  // Valid cluster must have at least 2 hits
        }

        public void printCluster(int clusterIndex) {
            System.out.printf("Cluster %d - Size: %d\n", clusterIndex, getClusterSize());
            for (EventData event : events) {
                System.out.printf("  ZW: %.2f, ZB: %.2f, PhiW: %.2f, PhiB: %.2f, TW: %.2f, TB: %.2f, Sector: %d, Layer: %d, Component: %d, Order: %d, ADC: %d, Pedestal: %d\n",
                        event.zWedge, event.zBar, event.phiWedge, event.phiBar, event.timeWedge, event.timeBar,
                        event.sector, event.layer, event.component, event.order, event.adc, event.pedestal);
            }
        }
    }

    public static void main(String[] args) {
        if (args.length < 1) {
            System.err.println("Please provide the path to the HIPO file.");
            System.exit(1);
        }

        String hipoFilePath = args[0];
        HipoReader reader = new HipoReader();
        reader.open(hipoFilePath);

        if (!reader.getSchemaFactory().hasSchema("ATOF::adc")) {
            System.err.println("Schema ATOF::adc not found in the HIPO file.");
            reader.close();
            System.exit(1);
        }

        // Loop over events and perform clustering per event
        processEvents(reader);

        reader.close();
    }

    // Method to process events and perform per-event clustering
    private static void processEvents(HipoReader reader) {
        Bank atofAdcBank = new Bank(reader.getSchemaFactory().getSchema("ATOF::adc"));
        Event event = new Event();

        // Series to store data for plotting
        XYSeries clusterSizeSeries = new XYSeries("Cluster Size");
        XYSeries deltaZSeries = new XYSeries("Delta Z");
        XYSeries deltaPhiSeries = new XYSeries("Delta Phi");
        XYSeries deltaTimeSeries = new XYSeries("Delta Time");

        int eventIndex = 0;

        while (reader.hasNext()) {
            reader.nextEvent(event);
            event.read(atofAdcBank);

            int numRows = atofAdcBank.getRows();
            System.out.println("\nProcessing a new event with " + numRows + " hits...");

            // Reset data for each event
            List<EventData> eventsData = new ArrayList<>();
            List<Cluster> clusters = new ArrayList<>();

            for (int hitIndex = 0; hitIndex < numRows; hitIndex++) {
                int sector = atofAdcBank.getInt("sector", hitIndex);
                int layer = atofAdcBank.getInt("layer", hitIndex);

                // Ensure layer is within the valid range of 0 to 3
                if (layer < 0 || layer > MAX_LAYER) {
                    System.out.println("Invalid layer: " + layer + ". Skipping hit.");
                    continue;
                }

                int component = atofAdcBank.getInt("component", hitIndex);
                int order = atofAdcBank.getInt("order", hitIndex);
                int adc = atofAdcBank.getInt("ADC", hitIndex);
                short pedestal = atofAdcBank.getShort("ped", hitIndex);
                double time = atofAdcBank.getFloat("time", hitIndex);

                // Calculate Z, Phi, and Time for both Wedge and Bar
                double wedgeZ = calculateZForWedge(hitIndex);
                double barZ = calculateZForBar(atofAdcBank, hitIndex);
                double phi = calculatePhiForBar(hitIndex);
                double barTime = calculateBarTime(atofAdcBank, hitIndex);

                // Store the event data
                eventsData.add(new EventData(wedgeZ, barZ, phi, phi, time, barTime, sector, layer, component, order, adc, pedestal));

                // Print the hit information at every stage
                System.out.printf("Hit %d -> ZW: %.2f, ZB: %.2f, Phi: %.2f, TimeW: %.2f, TimeB: %.2f, Sector: %d, Layer: %d, Component: %d\n",
                        hitIndex, wedgeZ, barZ, phi, time, barTime, sector, layer, component);

                // Calculate and print deltas for this hit
                double deltaZ = Math.abs(barZ - wedgeZ);
                double deltaPhi = Math.abs(phi - phi);  // No delta between phiBar and phiWedge since they're the same
                double deltaTime = Math.abs(barTime - time);
                System.out.printf("Hit %d -> Delta Z: %.2f, Delta Phi: %.4f, Delta Time: %.4f\n", hitIndex, deltaZ, deltaPhi, deltaTime);

                // Add data to the series for plotting
                deltaZSeries.add(eventIndex, deltaZ);
                deltaPhiSeries.add(eventIndex, deltaPhi);
                deltaTimeSeries.add(eventIndex, deltaTime);
            }

            // Form clusters for the current event
            System.out.println("Forming clusters...");
            formClusters(eventsData, clusters);

            // Print clusters for this event
            System.out.println("Clusters formed in this event:");
            printClusters(clusters);

            // Add cluster size data for valid clusters to plot
            for (Cluster cluster : clusters) {
                if (cluster.isValidCluster()) {
                    clusterSizeSeries.add(eventIndex, cluster.getClusterSize());
                }
            }

            eventIndex++;
        }

        // Plot the data for cluster size vs event index and other deltas
        plotSeries(clusterSizeSeries, "Cluster Size vs Event Index", "Event Index", "Cluster Size");
        plotSeries(deltaZSeries, "Delta Z vs Event Index", "Event Index", "Delta Z");
        plotSeries(deltaPhiSeries, "Delta Phi vs Event Index", "Event Index", "Delta Phi");
        plotSeries(deltaTimeSeries, "Delta Time vs Event Index", "Event Index", "Delta Time");
    }

    // Method to calculate Z for the bar based on suggested method (using Z positions of PMTs)
    private static double calculateZForBar(Bank bank, int rowIndex) {
        double timeLeftPMT = bank.getFloat("time", rowIndex);
        double timeRightPMT = bank.getFloat("time", rowIndex + 1);
        return VELOCITY_EFF * (timeRightPMT - timeLeftPMT) / 2.0;
    }

    // Method to calculate time for the bar using the correct Z positions of left and right PMTs
    private static double calculateBarTime(Bank bank, int rowIndex) {
        double timeLeftPMT = bank.getFloat("time", rowIndex);
        double timeRightPMT = bank.getFloat("time", rowIndex + 1);
        return Math.min(timeLeftPMT, timeRightPMT);
    }

    // Method to calculate Z position for the wedge based on wedge index
    private static double calculateZForWedge(int wedgeIndex) {
        return (wedgeIndex - (NUM_WEDGES - 1) / 2.0) * WEDGE_SPACING;
    }

    // Method to calculate Phi for a bar based on its index
    private static double calculatePhiForBar(int barIndex) {
        double phi = -Math.PI + (2 * Math.PI) * barIndex / NUM_BARS;
        return wrapPhi(phi);
    }

    // Ensure phi is between -π and π
    private static double wrapPhi(double phi) {
        while (phi > Math.PI) phi -= 2 * Math.PI;
        while (phi < -Math.PI) phi += 2 * Math.PI;
        return phi;
    }

    // Form clusters based on proximity in Z, Phi, and Time
    private static void formClusters(List<EventData> eventsData, List<Cluster> clusters) {
        for (EventData event : eventsData) {
            boolean addedToCluster = false;

            for (Cluster cluster : clusters) {
                if (isWithinProximity(cluster, event)) {
                    cluster.addEvent(event);
                    addedToCluster = true;
                    break;
                }
            }

            // If no suitable cluster was found, create a new one
            if (!addedToCluster) {
                Cluster newCluster = new Cluster();
                newCluster.addEvent(event);
                clusters.add(newCluster);
            }
        }

        // Filter out clusters that don't meet the minimum size (at least 2 hits)
        clusters.removeIf(cluster -> cluster.getClusterSize() < 2);
    }

    // Check if the event is within proximity of any event in the cluster
    private static boolean isWithinProximity(Cluster cluster, EventData event) {
        for (EventData clusterEvent : cluster.events) {
            if (Math.abs(clusterEvent.zBar - event.zWedge) < Z_THRESHOLD &&
                    Math.abs(clusterEvent.phiBar - event.phiWedge) < PHI_THRESHOLD &&
                    Math.abs(clusterEvent.timeBar - event.timeWedge) < TIME_THRESHOLD) {
                return true;
            }
        }
        return false;
    }

    // Print clusters
    private static void printClusters(List<Cluster> clusters) {
        int clusterIndex = 1;
        for (Cluster cluster : clusters) {
            if (cluster.isValidCluster()) {
                cluster.printCluster(clusterIndex++);
            }
        }
    }

    // Utility method to plot data
    private static void plotSeries(XYSeries series, String title, String xAxisLabel, String yAxisLabel) {
        XYSeriesCollection dataset = new XYSeriesCollection(series);
        JFreeChart chart = ChartFactory.createScatterPlot(title, xAxisLabel, yAxisLabel, dataset, PlotOrientation.VERTICAL, true, true, false);
        displayChart(chart, title);
    }

    // Utility method to display chart
    private static void displayChart(JFreeChart chart, String title) {
        JFrame frame = new JFrame(title);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new ChartPanel(chart));
        frame.pack();
        frame.setVisible(true);
    }
}
